// Generated by CoffeeScript 1.3.3
var Exchanger, FromExchanger, Mixin, Validation,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Mixin = (function() {

  function Mixin() {}

  Mixin.prototype.augment = function(t) {
    var m, n, _results;
    _results = [];
    for (n in this) {
      m = this[n];
      _results.push(!(n === 'augment' || !(this[n].prototype != null)) ? t[n] = m : void 0);
    }
    return _results;
  };

  return Mixin;

})();

Validation = (function(_super) {

  __extends(Validation, _super);

  function Validation() {
    return Validation.__super__.constructor.apply(this, arguments);
  }

  Validation.prototype._validNumber = function(value) {
    if (isNaN(value)) {
      this.error_messages.push("" + value + "には数字を入力してください");
      return this.error += 1;
    }
  };

  Validation.prototype._validSeisu = function(value) {
    if (value <= 0) {
      this.error_messages.push("0以上の数字を入力してください");
      return this.error += 1;
    }
  };

  return Validation;

})(Mixin);

Exchanger = (function() {

  function Exchanger(currency) {
    Validation.prototype.augment(this);
    this.currency = currency;
    this.rate = null;
    this.inMoney = null;
    this.result = null;
    this.error = 0;
    this.error_messages = [];
  }

  Exchanger.prototype._validate = function() {
    this._validNumber(this.inMoney);
    this._validNumber(this.rate);
    this._validSeisu(this.inMoney);
    return this._validSeisu(this.rate);
  };

  Exchanger.prototype.setRate = function(dom) {
    return this.rate = $(dom).val();
  };

  Exchanger.prototype.setInMoney = function(dom) {
    return this.inMoney = $(dom).val();
  };

  Exchanger.prototype.setOutMoney = function(dom) {
    return $(dom).html(this.result);
  };

  Exchanger.prototype._isValid = function() {
    return this.error === 0;
  };

  Exchanger.prototype._calc = function(dom) {
    var result;
    result = this.inMoney * this.rate;
    result = Math.round(result * 100) / 100;
    this.result = "" + result + " " + this.currency;
    return this.setOutMoney(dom);
  };

  Exchanger.prototype._sayError = function(dom) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.error_messages.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      alert(this.error_messages[i]);
    }
    this.error = 0;
    this.result = "----";
    return this.setOutMoney(dom);
  };

  Exchanger.prototype.exchange = function(dom) {
    this._validate();
    if (this._isValid()) {
      return this._calc(dom);
    } else {
      return this._sayError(dom);
    }
  };

  return Exchanger;

})();

FromExchanger = (function(_super) {

  __extends(FromExchanger, _super);

  function FromExchanger() {
    return FromExchanger.__super__.constructor.apply(this, arguments);
  }

  FromExchanger.prototype._calc = function(dom) {
    var result;
    result = this.inMoney / this.rate;
    result = Math.round(result * 100) / 100;
    this.result = "" + result + " " + this.currency;
    return this.setOutMoney(dom);
  };

  return FromExchanger;

})(Exchanger);

$(function() {
  $('#toYen').click(function() {
    var toYen;
    toYen = new Exchanger("円");
    toYen.setRate('#rate');
    toYen.setInMoney('#inMoney');
    return toYen.exchange('#outMoney');
  });
  $('#fromYen').click(function() {
    var toYen;
    toYen = new FromExchanger("ドル");
    toYen.setRate('#rate');
    toYen.setInMoney('#inMoney');
    return toYen.exchange('#outMoney');
  });
  $('#zero').click(function() {
    return $('#rate').val(0);
  });
  return $('#hyaku').click(function() {
    return $('#rate').val(100);
  });
});
